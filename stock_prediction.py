# -*- coding: utf-8 -*-
"""Python_Stock_Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hNdTFTO0bhglsT5Ui2uRP2XdPRT2_VNp

This notebook is a python scrip for stock maret forecasting. The example used here is for the Apple stock trained on a period of data from 1/1/2010 to 9/10/2019. The model is then used to forecast the stock price over a forecast period(60 days in this example.)
"""

import numpy as np
import pandas as pd
import datetime
import pandas_datareader.data as web
from pandas import Series, DataFrame
from sklearn import linear_model
from sklearn.linear_model import OrthogonalMatchingPursuit
from pandas import Series, DataFrame
import matplotlib.pyplot as plt
from matplotlib import style
import matplotlib as mpl
from sklearn.metrics import mean_squared_error, r2_score
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import timedelta

from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn import preprocessing
from sklearn.model_selection import train_test_split

"""Setting the time period and stock name for web based pull using yahoo api."""

start = datetime.datetime(2010, 1, 1)
end = datetime.datetime(2019, 9, 10)
df = web.DataReader("AAPL",'yahoo', start, end)
df.tail()

"""Defining the forecast period"""

forecast_out = 60 # Number of how many days to forecast
df['Prediction'] = df['Adj Close'].shift(-forecast_out)

df.drop(['Prediction'], 1)

x = np.array(df.drop(['Prediction'], 1))
x = x[:-forecast_out]
x

y = np.array(df['Prediction'])
y = y[:-forecast_out]

"""Splitting the data into test and train for predictive modelling"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2)

"""Using three different models for training and prediction namely: Linear, Ridge and Lasso regression."""

linear_model = LinearRegression()
ridge_model = Ridge()
lasso_model = Lasso()

linear_model.fit(x_train, y_train)
ridge_model.fit(x_train, y_train)
lasso_model.fit(x_train, y_train)

"""The below code helps look at the accuracy of the three different regression models by comparing the predicted stock price vs the actual stock price."""

linear_model_score = linear_model.score(x_test, y_test)
print('LinearModel score:', linear_model_score)

ridge_model_score = ridge_model.score(x_test, y_test)
print('RidgeModel score:', ridge_model_score)

lasso_model_score = lasso_model.score(x_test, y_test)
print('LassoModel score:', lasso_model_score)

"""Looks like the accuracy is all over 90%. Next step is predicting the stock price over the forecast period using the three different regression models."""

x_forecast = np.array(df.drop(['Prediction'], 1))[-forecast_out:]
linear_model_forecast_prediction = linear_model.predict(x_forecast)
linear_model_real_prediction = linear_model.predict(np.array(df.drop(['Prediction'], 1)))
ridge_model_forecast_prediction = ridge_model.predict(x_forecast)
ridge_model_real_prediction = ridge_model.predict(np.array(df.drop(['Prediction'], 1)))
lasso_model_forecast_prediction = lasso_model.predict(x_forecast)
lasso_model_real_prediction = lasso_model.predict(np.array(df.drop(['Prediction'], 1)))
ridge_model_forecast_prediction

"""The final step is visualizing the prediction of the stock price from all the three models and displaying it."""

predicted_dates = []
recent_date = df.index.max()
display_at = 2100
alpha = 0.5

for i in range(forecast_out):
    recent_date += timedelta(days=1)
    predicted_dates.append(recent_date)

plt.plot(df.index[display_at:], linear_model_real_prediction[display_at:], label='Linear Preds', c='blue', alpha=alpha)
plt.plot(predicted_dates, linear_model_forecast_prediction, c='blue', alpha=alpha)
plt.plot(df.index[display_at:], ridge_model_real_prediction[display_at:], label='Ridge Preds', c='green', alpha=alpha)
plt.plot(predicted_dates, ridge_model_forecast_prediction, c='green', alpha=alpha)
plt.plot(df.index[display_at:], lasso_model_real_prediction[display_at:], label='Lasso Preds', c='red', alpha=alpha)
plt.plot(predicted_dates, lasso_model_forecast_prediction, c='red', alpha=alpha)
plt.plot(df.index[display_at:], df['Close'][display_at:], label='AAPL', c='black', linewidth=3)
plt.legend()
